#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#define Button_PERIPH SYSCTL_PERIPH_GPIOF
#define ButtonBase GPIO_PORTF_BASE
#define Button1 GPIO_PIN_4
#define Button2 GPIO_PIN_0

#define LED_BASE GPIO_PORTF_BASE
#define RED_LED GPIO_PIN_1
#define BLUE_LED GPIO_PIN_2
#define GREEN_LED GPIO_PIN_3
// LOCK_F and CR_F - used for unlocking PORTF pin 0
#define LOCK_F (*((volatile unsigned long *)0x40025520))
#define CR_F   (*((volatile unsigned long *)0x40025524))
uint8_t value1=0,value2=0,data1,data2, sw2status=0;

uint8_t ledstatus=2;
uint32_t ui32Period;
uint8_t flag=0, status=0;//1 for pressed, 2 for still pressed, 0 for idle, flag 1 is for key was pressed, 0 for released
/*

* Function Name: switchPinConfig()

* Input: none

* Output: none

* Description: Set PORTF Pin 0 and Pin 4 as input. Note that Pin 0 is locked.

* Example Call: switchPinConfig();

*/
void switchPinConfig(void)
{
	// Following two line removes the lock from SW2 interfaced on PORTF Pin0 -- leave this unchanged
	LOCK_F=0x4C4F434BU;
	CR_F=Button1|Button2;

	// GPIO PORTF Pin 0 and Pin4
	GPIODirModeSet(GPIO_PORTF_BASE,Button1,GPIO_DIR_MODE_IN); // Set Pin-4 of PORT F as Input. Modifiy this to use another switch
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, Button1);
	GPIOPadConfigSet(GPIO_PORTF_BASE,Button1,GPIO_STRENGTH_12MA,GPIO_PIN_TYPE_STD_WPU);
	GPIODirModeSet(GPIO_PORTF_BASE,Button2,GPIO_DIR_MODE_IN); // Set Pin-4 of PORT F as Input. Modifiy this to use another switch
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, Button2);
	GPIOPadConfigSet(GPIO_PORTF_BASE,Button2,GPIO_STRENGTH_12MA,GPIO_PIN_TYPE_STD_WPU);
}
int main(void)
{

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
	SysCtlDelay(3);
	switchPinConfig();//initialised the buttons
	GPIOPinTypeGPIOOutput(LED_BASE, RED_LED|BLUE_LED|GREEN_LED);
	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
	ui32Period = (SysCtlClockGet() / 30) / 2;
	TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period -1);
	IntEnable(INT_TIMER0A);
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
	IntMasterEnable();
	TimerEnable(TIMER0_BASE, TIMER_A);
	//GPIOPinWrite(LED_BASE,RED_LED, 2);
}
void Timer0IntHandler(void)
{
	// Clear the timer interrupt
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
	value1= GPIOPinRead(ButtonBase,Button1);
	value2= GPIOPinRead(ButtonBase,Button2);
	//data1=detectKeyPress(value1);
	/*if(data1==1){
		GPIOPinWrite(LED_BASE,RED_LED|BLUE_LED|GREEN_LED, ledstatus);
		if(ledstatus==8)
			ledstatus=2;
		else
			ledstatus=ledstatus*2;
	}
	if(data1==0){
		GPIOPinWrite(LED_BASE,RED_LED|BLUE_LED|GREEN_LED, 0);

	}*/
	data2=detectKeyPress(value2);
	if(data2==1){
			GPIOPinWrite(LED_BASE,RED_LED|BLUE_LED|GREEN_LED, ledstatus);
			if(ledstatus==8)
				ledstatus=2;
			else
				ledstatus=ledstatus*2;
		}
	if(data2==0){
		GPIOPinWrite(LED_BASE,RED_LED|BLUE_LED|GREEN_LED, 0);

	}


}
uint8_t detectKeyPress(uint8_t value)
{
	if(value==0 && status==2 && flag==0){
		flag=1;
		status=0;
		return flag;
	}
	else if(value==0 && flag!=1){//idle to pressing
		status++;
		//flag=0;
		//return 0;
	}
	if(value!=0 && status==2){
		flag=0;
		status=0;
		return flag;
	}
	else if(value!=0 & flag!=0){//idle to release
		status++;
		//flag=0;
		//return 0;
	}
	return 2;//idle
	/*if(value==0 && status==0){//key is in pressed state, idle to press
		status=1;
		//GPIOPinWrite(LED_BASE,RED_LED, 2);
		return 0;
	}
	if(value==0 && status==1 ){ //key is still pressed, mark flag=1
		flag=1;
		return flag;
	}
	if(value==0x10 && status==1){//key is released, idle now, change status to idle
		status=0;
		flag=0;
		return flag;
	}
	if(value==0x10 && status==0){ //key is idle to release
		status=2;
		return 0;
	}
	if(value==0x10 && status==2){ //key is still released, mark released state
		flag=2;
		return flag;
		}
	if(value==0 && status==2){ //key is pressed, idle now
		status=0;
		flag=0;
		return flag;
		}*/
}

