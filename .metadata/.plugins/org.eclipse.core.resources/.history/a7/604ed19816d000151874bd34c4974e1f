#include<stdint.h>
#include<math.h>
#include<stdbool.h>
#include"inc/hw_ints.h"
#include"inc/hw_memmap.h"
#include"inc/hw_types.h"
#include"driverlib/gpio.h"
#include"driverlib/interrupt.h"
#include"driverlib/pin_map.h"
#include"driverlib/sysctl.h"
#include"driverlib/uart.h"
#include"driverlib/adc.h"
uint32_t ui32ADC0Value[4], digit[3];
int8_t tnum, i=0, length,len, mode=0, j=0;
volatile uint32_t ui32TempAvg;
volatile uint32_t ui32TempValueC, deftemp=14, temp=0;

void UARTIntHandler(void)
{
uint32_t ui32Status;
ui32Status = UARTIntStatus(UART0_BASE, true); //get interrupt status
UARTIntClear(UART0_BASE, ui32Status); //clear the asserted interrupts
while(UARTCharsAvail(UART0_BASE)) //loop while there are chars
 {
	//deftemp=UARTCharGetNonBlocking(UART0_BASE);
UARTCharPutNonBlocking(UART0_BASE, (temp=UARTCharGetNonBlocking(UART0_BASE))); //echo character
if(temp==83){
	mode=2;
}
if(temp>47 && temp<58)
{
	j++;
	if(j==1)
		deftemp=10*(temp-48);
	else if(j==2)
		deftemp=deftemp+temp-48;
}
if(temp==13){
	mode=0;
	UARTCharPut(UART0_BASE, 'S');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'M');
	UARTCharPut(UART0_BASE, 'P');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'A');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'U');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'U');
	UARTCharPut(UART0_BASE, 'P');
	UARTCharPut(UART0_BASE, 'D');
	UARTCharPut(UART0_BASE, 'A');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'D');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'O');
}
if(mode==2 && temp==83){
			UARTCharPut(UART0_BASE, ' ');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, 'N');
			UARTCharPut(UART0_BASE, 'T');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, 'R');
			UARTCharPut(UART0_BASE, ' ');
			UARTCharPut(UART0_BASE, 'T');
			UARTCharPut(UART0_BASE, 'H');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, ' ');
			UARTCharPut(UART0_BASE, 'T');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, 'M');
			UARTCharPut(UART0_BASE, 'P');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, 'R');
			UARTCharPut(UART0_BASE, 'A');
			UARTCharPut(UART0_BASE, 'T');
			UARTCharPut(UART0_BASE, 'U');
			UARTCharPut(UART0_BASE, 'R');
			UARTCharPut(UART0_BASE, 'E');
			UARTCharPut(UART0_BASE, ' ');
			UARTCharPut(UART0_BASE, ':');
			UARTCharPut(UART0_BASE, ' ');
	}
GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1, 0x04); //blink LED
SysCtlDelay(SysCtlClockGet() / (10 * 3)); //delay ~1 msec
GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0); //turn off LED
 }
}
///////
void printtemp(int8_t ctemp, int8_t stemp){
	UARTCharPut(UART0_BASE, 'C');
	UARTCharPut(UART0_BASE, 'U');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'N');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'M');
	UARTCharPut(UART0_BASE, 'P');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'A');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'U');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, '=');
	UARTCharPut(UART0_BASE, ' ');
	asciiInt(ctemp);
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, ',');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'S');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'M');
	UARTCharPut(UART0_BASE, 'P');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'A');
	UARTCharPut(UART0_BASE, 'T');
	UARTCharPut(UART0_BASE, 'U');
	UARTCharPut(UART0_BASE, 'R');
	UARTCharPut(UART0_BASE, 'E');
	UARTCharPut(UART0_BASE, ' ');
	UARTCharPut(UART0_BASE, '=');
	UARTCharPut(UART0_BASE, ' ');
	//UARTCharPut(UART0_BASE, 12);
	asciiInt(stemp);
}
/////////converting ascii to decimal
void asciiInt(int8_t num){
    tnum=num;
	if(num<0)
		tnum=-1*tnum;
	length = (tnum == 0 ? 1 : (int)(log10(tnum)+1));
	len=length;
	  for(i=tnum;len--; i=(int)(i/10))
		  digit[len] = (i%10);
	  if(num<0){
		  UARTCharPut(UART0_BASE, 45);
	  }
	  else{
		  UARTCharPut(UART0_BASE, 43);
		  //UARTCharPut(UART0_BASE, 48+length);
	  }
	  for(i=0; i<length;i++){
		  UARTCharPut(UART0_BASE, 48+digit[i]);

	  }
	  UARTCharPut(UART0_BASE, '*');
	  UARTCharPut(UART0_BASE, 'C');



}

int main(void) {
SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
ADCHardwareOversampleConfigure(ADC0_BASE, 64);
ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);
ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);
ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);
ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);
ADCSequenceEnable(ADC0_BASE, 1);
GPIOPinConfigure(GPIO_PA0_U0RX);
GPIOPinConfigure(GPIO_PA1_U0TX);
GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); //enable GPIO port for LED
GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1); //enable pin for LED PF2
UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
 (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
IntMasterEnable(); //enable processor interrupts
IntEnable(INT_UART0); //enable the UART interrupt
UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT); //only enable RX and TX interrupts


while (1) //let interrupt handler do the UART echo function
 {
// if (UARTCharsAvail(UART0_BASE)) UARTCharPut(UART0_BASE, UARTCharGet(UART0_BASE));
	ADCIntClear(ADC0_BASE, 1);
	ADCProcessorTrigger(ADC0_BASE, 1);
	while(!ADCIntStatus(ADC0_BASE, 1, false))
	{
	}
	ADCSequenceDataGet(ADC0_BASE, 1, ui32ADC0Value);
	ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4;
	ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;
	if(mode==0){
		UARTCharPut(UART0_BASE, '\r');
		UARTCharPut(UART0_BASE, '\n');
		printtemp(ui32TempValueC, deftemp);
		UARTCharPut(UART0_BASE, '\r');
		UARTCharPut(UART0_BASE, '\n');
		if(ui32TempValueC<=deftemp)
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3|GPIO_PIN_1, 0x08); //glow green LED
		else
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_3, 0x02); //glow red LED
	}

	SysCtlDelay(25000000);
}
}
